#pragma once

#include "boundary.h"
#include "fluid.h"

#include <vector>
#include <array>
#include <set>

#include "../lib/Eigen/Eigen"

struct Cell_Axisymmetric;

struct Face_Axisymmetric;

struct Vertex_Axisymmtric
{
    Eigen::Vector2d point; // x , r
    std::set<Face_Axisymmetric*> faces;

    Vertex_Axisymmtric();
    Vertex_Axisymmtric(std::array<double,2> _point);
};

struct GhostFace_Axisymmetric
{
    std::array<unsigned,2> vertex_id;
};

struct Face_Axisymmetric
{
    Fluid_Axisymmetric fluid;

    Eigen::Vector2d normal; // rhs
    Eigen::Vector2d center;
    double total_area;

    std::array<Vertex_Axisymmtric*,2> vertex;
    std::array<Cell_Axisymmetric*,2> cell; // first cell is rhs based on vertex order
    Boundary* boundary = nullptr;

    Fluid_Axisymmetric(Vertex_Axisymmtric* p1, Vertex_Axisymmtric* p2);
};

struct GhostCell_Axisymmetric
{
    std::vector<int,2> vertex_id;
};

struct Cell_Axisymmetric
{
    Fluid_Axisymmetric fluid;
    const std::vector<Face_Axisymmetric*> faces;
    std::vector<double> face_distance;
    Eigen::Vector2d center;
    double volume;

    Cell_Axisymmetric(std::vector<Vertex_Axisymmtric*>& vertices);
    Cell_Axisymmetric(std::vector<Face_Axisymmetric*>& faces);
};
